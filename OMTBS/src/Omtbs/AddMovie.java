package Omtbs;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.ParseException;
import java.util.Date;  
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;

/* @author richu*/

public class AddMovie extends javax.swing.JFrame {

    /* Creates new form AddMovie */
    public AddMovie() {
        initComponents();
        table_update();
        locationfetch();
        capacityfetch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        CompanyLogoIcon = new javax.swing.JLabel();
        MovieTicketForm = new javax.swing.JLabel();
        CloseButtonIcon = new javax.swing.JButton();
        MinimizeButtonIcon = new javax.swing.JButton();
        MaximizeButtonIcon = new javax.swing.JButton();
        SessionUserName = new javax.swing.JLabel();
        TextSessionAdminUserName = new javax.swing.JTextField();
        MovieNameName = new javax.swing.JLabel();
        TextMovieName = new javax.swing.JTextField();
        MovieTeatherName = new javax.swing.JLabel();
        TextMovieTeatherName = new javax.swing.JTextField();
        TimeSlotName = new javax.swing.JLabel();
        TextTimeSlot = new javax.swing.JComboBox<>();
        LocationName = new javax.swing.JLabel();
        TextLocation = new javax.swing.JComboBox<>();
        DateName = new javax.swing.JLabel();
        TextDate = new com.toedter.calendar.JDateChooser();
        NoOfSetsName = new javax.swing.JLabel();
        TextNoOfSets = new javax.swing.JComboBox<>();
        MovieDescName = new javax.swing.JLabel();
        MovieDescScrollPanel = new javax.swing.JScrollPane();
        TextMovieDesc = new javax.swing.JTextArea();
        PricePerPersonName = new javax.swing.JLabel();
        TextPricePerPerson = new javax.swing.JTextField();
        TextPriceComment = new javax.swing.JLabel();
        LanguageName = new javax.swing.JLabel();
        TextLanguage = new javax.swing.JComboBox<>();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        AddMovieTablePanel = new javax.swing.JScrollPane();
        AddMovieTable = new javax.swing.JTable();
        CommentMovieTeatherLabel = new javax.swing.JLabel();
        CommentMovieNameLabel = new javax.swing.JLabel();
        RefreshButton = new javax.swing.JButton();
        MainBgImg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Movie");
        setLocationByPlatform(true);
        setName("AddMovieFrame"); // NOI18N
        setUndecorated(true);
        setType(java.awt.Window.Type.POPUP);

        MainPanel.setBackground(java.awt.SystemColor.textHighlightText);
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CompanyLogoIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/lightning _50px.png"))); // NOI18N
        CompanyLogoIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MainPanel.add(CompanyLogoIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 50));

        MovieTicketForm.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        MovieTicketForm.setForeground(new java.awt.Color(255, 255, 255));
        MovieTicketForm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MovieTicketForm.setText("CREATE MOVIES");
        MovieTicketForm.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        MainPanel.add(MovieTicketForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 320, 50));

        CloseButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Cross_50px.png"))); // NOI18N
        CloseButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CloseButtonIcon.setBorderPainted(false);
        CloseButtonIcon.setContentAreaFilled(false);
        CloseButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CloseButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Cross_50px.png"))); // NOI18N
        CloseButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseButtonIconMouseClicked(evt);
            }
        });
        MainPanel.add(CloseButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1410, 10, 50, 50));

        MinimizeButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Minimize_50px.png"))); // NOI18N
        MinimizeButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MinimizeButtonIcon.setBorderPainted(false);
        MinimizeButtonIcon.setContentAreaFilled(false);
        MinimizeButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MinimizeButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Minimize_50px.png"))); // NOI18N
        MinimizeButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeButtonIconMouseClicked(evt);
            }
        });
        MainPanel.add(MinimizeButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 10, 50, 50));

        MaximizeButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Maximize_50px.png"))); // NOI18N
        MaximizeButtonIcon.setText("jButton2");
        MaximizeButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MaximizeButtonIcon.setBorderPainted(false);
        MaximizeButtonIcon.setContentAreaFilled(false);
        MaximizeButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaximizeButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Maximize_50px.png"))); // NOI18N
        MaximizeButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MaximizeButtonIconMouseClicked(evt);
            }
        });
        MainPanel.add(MaximizeButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 10, 50, 50));

        SessionUserName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        SessionUserName.setForeground(new java.awt.Color(255, 255, 255));
        SessionUserName.setText("Session User:");
        MainPanel.add(SessionUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, -1, -1));

        TextSessionAdminUserName.setEditable(false);
        TextSessionAdminUserName.setBackground(new java.awt.Color(204, 204, 204));
        TextSessionAdminUserName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextSessionAdminUserName.setToolTipText("Login Admin User");
        TextSessionAdminUserName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        MainPanel.add(TextSessionAdminUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 290, 40));

        MovieNameName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        MovieNameName.setForeground(new java.awt.Color(255, 255, 255));
        MovieNameName.setText("Movie Name:");
        MainPanel.add(MovieNameName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, -1, -1));

        TextMovieName.setBackground(new java.awt.Color(204, 204, 204));
        TextMovieName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextMovieName.setToolTipText("Enter the Movie Name");
        TextMovieName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        TextMovieName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextMovieNameKeyReleased(evt);
            }
        });
        MainPanel.add(TextMovieName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 310, 40));

        MovieTeatherName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        MovieTeatherName.setForeground(new java.awt.Color(255, 255, 255));
        MovieTeatherName.setText("Movie Teather:");
        MainPanel.add(MovieTeatherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, -1, -1));

        TextMovieTeatherName.setBackground(new java.awt.Color(204, 204, 204));
        TextMovieTeatherName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextMovieTeatherName.setToolTipText("Movie Teather Name");
        TextMovieTeatherName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        TextMovieTeatherName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextMovieTeatherNameKeyReleased(evt);
            }
        });
        MainPanel.add(TextMovieTeatherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 290, 40));

        TimeSlotName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        TimeSlotName.setForeground(new java.awt.Color(255, 255, 255));
        TimeSlotName.setText("TIme Slot:");
        MainPanel.add(TimeSlotName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, -1, -1));

        TextTimeSlot.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TextTimeSlot.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MorningShow: 9-12AM", "NoonShow: 12.30-2.30PM", "AfterNoonShow: 3-5.30PM", "NightShow: 6.30-9.30" }));
        TextTimeSlot.setToolTipText("Time");
        MainPanel.add(TextTimeSlot, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 240, 40));

        LocationName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        LocationName.setForeground(new java.awt.Color(255, 255, 255));
        LocationName.setText("Location:");
        MainPanel.add(LocationName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, -1, -1));

        TextLocation.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TextLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kerala-Kottayam", "Kerala-Chanacherry", "Kerala-Alleppey", "Kerala-Thrivulla", "Kerala-Kuttanad", "Kerala-Eranakulam", "Kerala-Thrivulla", "Kerala-Karukachal", "Kerala-cochi", "Kerala-LulluMall", "Kerala-Varkala", "Kerala-Thrissur", "Kerala-Kozhikode", "Kerala-Munnar", "Tamilnadu-Chennai" }));
        TextLocation.setToolTipText("Locations");
        MainPanel.add(TextLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 270, 40));

        DateName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        DateName.setForeground(new java.awt.Color(255, 255, 255));
        DateName.setText("Date:");
        MainPanel.add(DateName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, -1, -1));

        TextDate.setToolTipText("Date");
        TextDate.setDateFormatString("dd-MM-y");
        TextDate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MainPanel.add(TextDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 240, 40));

        NoOfSetsName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        NoOfSetsName.setForeground(new java.awt.Color(255, 255, 255));
        NoOfSetsName.setText("No of Sets:");
        MainPanel.add(NoOfSetsName, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 400, -1, -1));

        TextNoOfSets.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TextNoOfSets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "80", "100", "120", "130", "140", "150", "180", "200", "220" }));
        TextNoOfSets.setToolTipText("Seat Counts");
        MainPanel.add(TextNoOfSets, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 430, 110, 40));

        MovieDescName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        MovieDescName.setForeground(new java.awt.Color(255, 255, 255));
        MovieDescName.setText("Movie Descriptions:");
        MainPanel.add(MovieDescName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, -1, -1));

        TextMovieDesc.setColumns(20);
        TextMovieDesc.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextMovieDesc.setRows(5);
        TextMovieDesc.setToolTipText("Movie Breif");
        TextMovieDesc.setBorder(null);
        MovieDescScrollPanel.setViewportView(TextMovieDesc);

        MainPanel.add(MovieDescScrollPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 430, 320, 190));

        PricePerPersonName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        PricePerPersonName.setForeground(new java.awt.Color(255, 255, 255));
        PricePerPersonName.setText("Price Per Person:");
        MainPanel.add(PricePerPersonName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, -1, -1));

        TextPricePerPerson.setBackground(new java.awt.Color(204, 204, 204));
        TextPricePerPerson.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextPricePerPerson.setToolTipText("Please enter below 2000");
        TextPricePerPerson.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        TextPricePerPerson.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPricePerPersonKeyPressed(evt);
            }
        });
        MainPanel.add(TextPricePerPerson, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 430, 130, 40));

        TextPriceComment.setBackground(new java.awt.Color(255, 51, 51));
        TextPriceComment.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TextPriceComment.setForeground(new java.awt.Color(255, 255, 255));
        MainPanel.add(TextPriceComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 470, 130, 30));

        LanguageName.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        LanguageName.setForeground(new java.awt.Color(255, 255, 255));
        LanguageName.setText("Language:");
        MainPanel.add(LanguageName, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, -1));

        TextLanguage.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TextLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Malayalam", "Tamil", "Telugu", "Hindi", "English" }));
        TextLanguage.setToolTipText("Language");
        MainPanel.add(TextLanguage, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 530, 250, 40));

        AddButton.setBackground(new java.awt.Color(153, 255, 51));
        AddButton.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        AddButton.setText("Add");
        AddButton.setBorder(null);
        AddButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });
        MainPanel.add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 700, 170, 50));

        UpdateButton.setBackground(new java.awt.Color(255, 51, 102));
        UpdateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        UpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateButton.setText("Update");
        UpdateButton.setBorder(null);
        UpdateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        MainPanel.add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 700, 180, 50));

        DeleteButton.setBackground(new java.awt.Color(255, 51, 51));
        DeleteButton.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButton.setText("Delete");
        DeleteButton.setBorder(null);
        DeleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        MainPanel.add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 700, 180, 50));

        AddMovieTable.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        AddMovieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MOVIE ID", "ADMIN NAME", "THEATHER", "MOVIE", "DESCRIPTION", "TICKET PRICE", "SEAT CAPACITY", "TIME", "DATE", "LOCATION", "LANGUAGE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AddMovieTable.setColumnSelectionAllowed(true);
        AddMovieTable.setGridColor(new java.awt.Color(153, 153, 255));
        AddMovieTable.setInheritsPopupMenu(true);
        AddMovieTable.setShowGrid(true);
        AddMovieTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddMovieTableMouseClicked(evt);
            }
        });
        AddMovieTablePanel.setViewportView(AddMovieTable);
        AddMovieTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        MainPanel.add(AddMovieTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(722, 97, 740, 690));

        CommentMovieTeatherLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        CommentMovieTeatherLabel.setForeground(new java.awt.Color(255, 0, 51));
        CommentMovieTeatherLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        MainPanel.add(CommentMovieTeatherLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 270, 30));

        CommentMovieNameLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        CommentMovieNameLabel.setForeground(new java.awt.Color(255, 0, 51));
        CommentMovieNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        MainPanel.add(CommentMovieNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 280, 30));

        RefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.setToolTipText("Refresh");
        RefreshButton.setBorder(null);
        RefreshButton.setBorderPainted(false);
        RefreshButton.setContentAreaFilled(false);
        RefreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RefreshButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RefreshButtonMouseClicked(evt);
            }
        });
        MainPanel.add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, 50, 50));

        MainBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Pattern-digital_1470px.jpg"))); // NOI18N
        MainPanel.add(MainBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1470, 800));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonIconMouseClicked
        this.dispose();
    }//GEN-LAST:event_CloseButtonIconMouseClicked

    private void MinimizeButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonIconMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinimizeButtonIconMouseClicked

    private void MaximizeButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaximizeButtonIconMouseClicked
        if(this.getExtendedState()!= Login.MAXIMIZED_BOTH){
            this.setExtendedState(Login.MAXIMIZED_BOTH);
        }
        else{
            this.setExtendedState(Login.NORMAL);
        }
    }//GEN-LAST:event_MaximizeButtonIconMouseClicked

    private void table_update(){
        int c;
        try{
            String nnahname =  TextSessionAdminUserName.getText();
            //String nnahname = "Richu Antony";
            PreparedStatement ps;
            String TableQuery = "SELECT * FROM `moviedetails` WHERE MOVIE_CREATED_ADMIN = ?";
            ps = MyConnection.getConnection().prepareStatement(TableQuery);
            ps.setString(1, nnahname);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            c = rsmd.getColumnCount();
            DefaultTableModel Df = (DefaultTableModel)AddMovieTable.getModel();
            Df.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for(int a=1; a<=c; a++){
                    v2.add(rs.getString("MOVIE_ID"));
                    v2.add(rs.getString("MOVIE_CREATED_ADMIN"));
                    v2.add(rs.getString("MOVIE_THEATRE"));
                    v2.add(rs.getString("MOVIE_NAME"));
                    v2.add(rs.getString("MOVIE_DESC"));
                    v2.add(rs.getString("MOVIE_PRICE"));
                    v2.add(rs.getString("MOVIE_NO_OF_SEATS"));
                    v2.add(rs.getString("MOVIE_TIME"));
                    v2.add(rs.getString("MOVIE_DATE"));
                    v2.add(rs.getString("MOVIE_LOCATION"));
                    v2.add(rs.getString("MOVIE_LANGUAGE"));
                }
                Df.addRow(v2);
            }                        
        } 
        catch (SQLException ex){
            Logger.getLogger(AddMovie.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Tabel Data Collection Error Occuring!" , "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        /*String validatemoviename = CommentMovieNameLabel.getText();
        String validatemovietheather = CommentMovieTeatherLabel.getText();*/
        
        String addsuname = TextSessionAdminUserName.getText();
        String addmovietheather = TextMovieTeatherName.getText();
        String addmoviename = TextMovieName.getText();
        String addmoviedesc = TextMovieDesc.getText();
        String addmovieprice = TextPricePerPerson.getText();
        String addseats = TextNoOfSets.getSelectedItem().toString();
        String addlanguage = TextLanguage.getSelectedItem().toString();
        String addtheatherlocation = TextLocation.getSelectedItem().toString();
        String addtimeslot = TextTimeSlot.getSelectedItem().toString();  
        SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");  
        String adddate = Date_Format.format(TextDate.getDate()); 
        if (TextDate.getDate() == null) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Select The Date", "Date Warning!", JOptionPane.WARNING_MESSAGE);
        }
        if(addsuname.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Login Again! or Login Failed! Because You Manually Redirected The Admin Login Procedure" , 
                    "Session Admin User Name", JOptionPane.WARNING_MESSAGE);
            this.dispose();
        }
        else if(addmovietheather.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Enter The Theather Name" , "Theather Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(addmoviename.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Enter The Movie Name" , "Movie Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(addtimeslot.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Movie Time Slot" , "Movie Show Time", JOptionPane.WARNING_MESSAGE);
        }
        else if(addseats.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Movie Theather Seating Capacity" , "No. Of Seats", JOptionPane.WARNING_MESSAGE);
        }
        else if(addtheatherlocation.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Theather Location" , "Theather Location", JOptionPane.WARNING_MESSAGE);
        }
        else if(addmoviedesc.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Enter The Movie Breif Description" , "Movie Description", JOptionPane.WARNING_MESSAGE);
        }
        else if(addmovieprice.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Enter The Movie Price" , "Below 2000 rupees", JOptionPane.WARNING_MESSAGE);
        }
        else if(addlanguage.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Movie Language" , "Movie Language", JOptionPane.WARNING_MESSAGE);
        }
        else {
            PreparedStatement ps;
            String AddMovieQuery = "INSERT INTO `moviedetails`(`MOVIE_CREATED_ADMIN`, `MOVIE_THEATRE`, `MOVIE_NAME`, `MOVIE_DESC`, "
                    + "`MOVIE_PRICE`, `MOVIE_NO_OF_SEATS`, `MOVIE_TIME`, `MOVIE_DATE`, `MOVIE_LOCATION`, `MOVIE_LANGUAGE`)"
                    + " VALUES (?,?,?,?,?,?,?,?,?,?)";
            try{
                ps = MyConnection.getConnection().prepareStatement(AddMovieQuery);
                ps.setString(1, addsuname);
                ps.setString(2, addmovietheather);
                ps.setString(3, addmoviename);
                ps.setString(4, addmoviedesc);
                ps.setString(5, addmovieprice);
                ps.setString(6, addseats);
                ps.setString(7, addtimeslot);
                ps.setString(8, adddate);
                ps.setString(9, addtheatherlocation);
                ps.setString(10, addlanguage);
                if(ps.executeUpdate() > 0){
                    table_update();
                    JOptionPane.showMessageDialog(null,"Movie Slot Has Been Successfully Assigned" , "Movie Details", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    JOptionPane.showMessageDialog(null,"Database Connection Failed!" , "Database Connection", JOptionPane.INFORMATION_MESSAGE);
                }
            } 
            catch (SQLException ex) 
               {
                    Logger.getLogger(AddMovie.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Movie Details Insertion Error Occuring!", "Insertion Error Message", JOptionPane.ERROR_MESSAGE);
               }
            TextMovieTeatherName.setText("");
            TextMovieName.setText("");
            TextMovieDesc.setText("");
            TextPricePerPerson.setText("");
            TextNoOfSets.setSelectedItem("");
            TextLanguage.setSelectedItem("");
            TextLocation.setSelectedItem("");
            TextTimeSlot.setSelectedItem("");
            TextDate.setDate(null);
            TextMovieName.requestFocus();
        } 
        /*else{
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Check The Entered Details", "Input Details Warning Message", JOptionPane.WARNING_MESSAGE);
        }*/
    }//GEN-LAST:event_AddButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        DefaultTableModel Df = (DefaultTableModel)AddMovieTable.getModel();
        int selectedIndex = AddMovieTable.getSelectedRow();
        try {
            int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            String addmovietheather = TextMovieTeatherName.getText();
            String addmoviename = TextMovieName.getText();
            String addmoviedesc = TextMovieDesc.getText();
            String addmovieprice = TextPricePerPerson.getText();
            String addseats = TextNoOfSets.getSelectedItem().toString();
            String addlanguage = TextLanguage.getSelectedItem().toString();
            String addtheatherlocation = TextLocation.getSelectedItem().toString();
            String addtimeslot = TextTimeSlot.getSelectedItem().toString();  
            SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");  
            String adddate = Date_Format.format(TextDate.getDate());
            
            PreparedStatement ps;
            String TableUpdateQuery = "UPDATE `moviedetails` SET MOVIE_THEATRE=? , MOVIE_NAME=? , MOVIE_DESC=? , MOVIE_PRICE=? , "
                    + "MOVIE_NO_OF_SEATS=? , MOVIE_TIME=? , MOVIE_DATE=? , MOVIE_LOCATION=? , MOVIE_LANGUAGE=? WHERE MOVIE_ID=?";
            ps = MyConnection.getConnection().prepareStatement(TableUpdateQuery);
            ps.setString(1, addmovietheather);
            ps.setString(2, addmoviename);
            ps.setString(3, addmoviedesc);
            ps.setString(4, addmovieprice);
            ps.setString(5, addseats);
            ps.setString(6, addtimeslot);
            ps.setString(7, adddate);
            ps.setString(8, addtheatherlocation);
            ps.setString(9, addlanguage);
            ps.setInt(10, id);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null,"Movie Slot Has Been Successfully Updated" , "Movie Details Updation", JOptionPane.INFORMATION_MESSAGE);
            table_update();
            TextMovieTeatherName.setText("");
            TextMovieName.setText("");
            TextMovieDesc.setText("");
            TextPricePerPerson.setText("");
            TextNoOfSets.setSelectedItem("");
            TextLanguage.setSelectedItem("");
            TextLocation.setSelectedItem("");
            TextTimeSlot.setSelectedItem("");
            TextDate.setDate(null);
            TextMovieName.requestFocus();        
        } 
        catch (SQLException ex) 
            {
                Logger.getLogger(AddMovie.class.getName()).log(Level.SEVERE, null, ex);
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,"Movie Details Updation Error Occuring!", "Updation Error Message", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        DefaultTableModel Df = (DefaultTableModel)AddMovieTable.getModel();
        int selectedIndex = AddMovieTable.getSelectedRow();
        try {
            int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            int dialogResult = JOptionPane.showConfirmDialog(null,"Do You Want To Delete The Movie Record!" , "Movie Deletion Warning" , JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                PreparedStatement ps;
                String TableDeleteQuery = "DELETE FROM `moviedetails` WHERE MOVIE_ID=?";
                ps = MyConnection.getConnection().prepareStatement(TableDeleteQuery);
                ps.setInt(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Movie Slot Has Been Successfully Deleted" , "Movie Details Deletion", JOptionPane.INFORMATION_MESSAGE);
                table_update();
                TextMovieTeatherName.setText("");
                TextMovieName.setText("");
                TextMovieDesc.setText("");
                TextPricePerPerson.setText("");
                TextNoOfSets.setSelectedItem("");
                TextLanguage.setSelectedItem("");
                TextLocation.setSelectedItem("");
                TextTimeSlot.setSelectedItem("");
                TextDate.setDate(null);
                TextMovieName.requestFocus();  
            }     
        } catch (SQLException ex) 
               {
                    Logger.getLogger(AddMovie.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Movie Details Deletion Error Occuring!", "Deletion Error Message", JOptionPane.ERROR_MESSAGE);
               }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void TextPricePerPersonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPricePerPersonKeyPressed
        String cprice = TextPricePerPerson.getText();
        int length = cprice.length();
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            if(length < 4){ 
                TextPricePerPerson.setEditable(true);
            }
            else{
                TextPricePerPerson.setEditable(false);
            }
        }
        else{
            if(evt.getExtendedKeyCode()== KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()== KeyEvent.VK_DELETE){
                TextPricePerPerson.setEditable(true);
            }
            else{
                TextPricePerPerson.setEditable(false); 
            }
        }
    }//GEN-LAST:event_TextPricePerPersonKeyPressed

    private void TextMovieTeatherNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextMovieTeatherNameKeyReleased
        String regex = "^[a-zA-Z ]{0,29}$";
        Pattern p = Pattern.compile(regex);
        Matcher match = p.matcher(TextMovieTeatherName.getText());
        if(!match.matches()){
            Toolkit.getDefaultToolkit().beep();
            CommentMovieTeatherLabel.setText("Theather Naming is incorrect!");
            AddButton.setEnabled(false);
            
        } 
        else{
            CommentMovieTeatherLabel.setText(null);
            AddButton.setEnabled(true);
        }
    }//GEN-LAST:event_TextMovieTeatherNameKeyReleased

    private void TextMovieNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextMovieNameKeyReleased
        String regex = "^[a-zA-Z ]{0,29}$";
        Pattern p = Pattern.compile(regex);
        Matcher match = p.matcher(TextMovieName.getText());
        if(!match.matches()){
            Toolkit.getDefaultToolkit().beep();
            CommentMovieNameLabel.setText("Movie Naming is incorrect!");
            AddButton.setEnabled(false);
        } 
        else{
            CommentMovieNameLabel.setText(null);
            AddButton.setEnabled(true);
        }
    }//GEN-LAST:event_TextMovieNameKeyReleased

    private void AddMovieTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddMovieTableMouseClicked
        try {
            DefaultTableModel Df = (DefaultTableModel)AddMovieTable.getModel();
            int selectedIndex = AddMovieTable.getSelectedRow();
            TextSessionAdminUserName.setText(Df.getValueAt(selectedIndex, 1).toString());
            TextMovieTeatherName.setText(Df.getValueAt(selectedIndex, 2).toString());
            TextMovieName.setText(Df.getValueAt(selectedIndex, 3).toString());
            TextMovieDesc.setText(Df.getValueAt(selectedIndex, 4).toString());
            TextPricePerPerson.setText(Df.getValueAt(selectedIndex, 5).toString());
            TextNoOfSets.setSelectedItem(Df.getValueAt(selectedIndex, 6).toString());
            TextTimeSlot.setSelectedItem(Df.getValueAt(selectedIndex, 7).toString());
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)Df.getValueAt(selectedIndex, 8));
            TextDate.setDate(date);
            TextLocation.setSelectedItem(Df.getValueAt(selectedIndex, 9).toString());
            TextLanguage.setSelectedItem(Df.getValueAt(selectedIndex, 10).toString());
        } 
        catch (ParseException ex) {
            Logger.getLogger(AddMovie.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Movie Details Fetching Error Occuring!", "Fetching Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddMovieTableMouseClicked

    private void RefreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshButtonMouseClicked
        table_update();
        locationfetch();
        capacityfetch();
    }//GEN-LAST:event_RefreshButtonMouseClicked
  
    private void locationfetch(){
        try{
            String movielocquery ="SELECT DISTINCT `THEATER_LOCATION` FROM `theater`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(movielocquery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              TextLocation.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Location Fetching Error Occuring!", "Fetching Error ", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void capacityfetch(){
        try{
            String moviecapquery ="SELECT DISTINCT `THEATER_CAPACITY` FROM `theater`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviecapquery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              TextNoOfSets.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Capacity Fetching Error Occuring!", "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMovie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddMovie().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTable AddMovieTable;
    private javax.swing.JScrollPane AddMovieTablePanel;
    private javax.swing.JButton CloseButtonIcon;
    private javax.swing.JLabel CommentMovieNameLabel;
    private javax.swing.JLabel CommentMovieTeatherLabel;
    private javax.swing.JLabel CompanyLogoIcon;
    private javax.swing.JLabel DateName;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel LanguageName;
    private javax.swing.JLabel LocationName;
    private javax.swing.JLabel MainBgImg;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton MaximizeButtonIcon;
    private javax.swing.JButton MinimizeButtonIcon;
    private javax.swing.JLabel MovieDescName;
    private javax.swing.JScrollPane MovieDescScrollPanel;
    private javax.swing.JLabel MovieNameName;
    private javax.swing.JLabel MovieTeatherName;
    private javax.swing.JLabel MovieTicketForm;
    private javax.swing.JLabel NoOfSetsName;
    private javax.swing.JLabel PricePerPersonName;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel SessionUserName;
    private com.toedter.calendar.JDateChooser TextDate;
    private javax.swing.JComboBox<String> TextLanguage;
    private javax.swing.JComboBox<String> TextLocation;
    private javax.swing.JTextArea TextMovieDesc;
    private javax.swing.JTextField TextMovieName;
    public javax.swing.JTextField TextMovieTeatherName;
    private javax.swing.JComboBox<String> TextNoOfSets;
    private javax.swing.JLabel TextPriceComment;
    private javax.swing.JTextField TextPricePerPerson;
    public javax.swing.JTextField TextSessionAdminUserName;
    private javax.swing.JComboBox<String> TextTimeSlot;
    private javax.swing.JLabel TimeSlotName;
    private javax.swing.JButton UpdateButton;
    // End of variables declaration//GEN-END:variables
}
