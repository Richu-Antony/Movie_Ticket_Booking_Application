package Omtbs;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/* @author richu */

public class MovieBooking extends javax.swing.JFrame {

    /* Creates new form MovieBooking */
    public MovieBooking() {
        initComponents();
        MovieFieldUpdate();
        LanguageFieldUpdate();
        LocationFieldUpdate();
        TheatherFieldUpdate();
        TimeFieldUpdate();
        avaliable_table();
        booking_table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MovieBookingMainPanel = new javax.swing.JPanel();
        CompanyLogo = new javax.swing.JLabel();
        CloseButton = new javax.swing.JLabel();
        MinimizeButton = new javax.swing.JLabel();
        MaximizeButton = new javax.swing.JLabel();
        UserNameLabel = new javax.swing.JLabel();
        UserNameTextField = new javax.swing.JTextField();
        MovieDescLabel = new javax.swing.JLabel();
        MovieDescScrollPane = new javax.swing.JScrollPane();
        MovieDescTextArea = new javax.swing.JTextArea();
        LanguageLabel = new javax.swing.JLabel();
        LanguageComboBox = new javax.swing.JComboBox<>();
        SeatsLabel = new javax.swing.JLabel();
        SeatsTextField = new javax.swing.JTextField();
        TicketPriceLabel = new javax.swing.JLabel();
        TicketPriceTextField = new javax.swing.JTextField();
        TotalLabel = new javax.swing.JLabel();
        TotalTextField = new javax.swing.JTextField();
        MovieLabel = new javax.swing.JLabel();
        MovieComboBox = new javax.swing.JComboBox<>();
        LocationLabel = new javax.swing.JLabel();
        LocationComboBox = new javax.swing.JComboBox<>();
        TheatherLabel = new javax.swing.JLabel();
        TheatherComboBox = new javax.swing.JComboBox<>();
        DateLabel = new javax.swing.JLabel();
        DateChooser = new com.toedter.calendar.JDateChooser();
        TimeLabel = new javax.swing.JLabel();
        TimeComboBox = new javax.swing.JComboBox<>();
        MBBookButton = new javax.swing.JButton();
        MBClearButton = new javax.swing.JButton();
        MBPayButton = new javax.swing.JButton();
        AvaliableListLabel = new javax.swing.JLabel();
        AvaliableListScrollPane = new javax.swing.JScrollPane();
        AvaliableListTable = new javax.swing.JTable();
        BookedListLabel = new javax.swing.JLabel();
        UserBookedScrollPane = new javax.swing.JScrollPane();
        UserBooked = new javax.swing.JTable();
        RefreshButton = new javax.swing.JButton();
        MBSubmitConfirmTextField = new javax.swing.JTextField();
        MovieBookingBgImg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie Booking");
        setLocationByPlatform(true);
        setName("MovieBookingFrame"); // NOI18N
        setUndecorated(true);

        MovieBookingMainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MovieBookingMainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CompanyLogo.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        CompanyLogo.setForeground(new java.awt.Color(255, 255, 255));
        CompanyLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/lightning _50px.png"))); // NOI18N
        CompanyLogo.setText("MOVIE TICKET BOOKING");
        CompanyLogo.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        MovieBookingMainPanel.add(CompanyLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 470, 50));

        CloseButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        CloseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Cross_50px.png"))); // NOI18N
        CloseButton.setText("4");
        CloseButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CloseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseButtonMouseClicked(evt);
            }
        });
        MovieBookingMainPanel.add(CloseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 10, 50, 50));

        MinimizeButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MinimizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Minimize_50px.png"))); // NOI18N
        MinimizeButton.setText("4");
        MinimizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeButtonMouseClicked(evt);
            }
        });
        MovieBookingMainPanel.add(MinimizeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1370, 10, 50, 50));

        MaximizeButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MaximizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Maximize_50px.png"))); // NOI18N
        MaximizeButton.setText("4");
        MaximizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MaximizeButtonMouseClicked(evt);
            }
        });
        MovieBookingMainPanel.add(MaximizeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 10, 50, 50));

        UserNameLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        UserNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        UserNameLabel.setText("User Name:");
        MovieBookingMainPanel.add(UserNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 110, 30));

        UserNameTextField.setEditable(false);
        UserNameTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        UserNameTextField.setBorder(null);
        MovieBookingMainPanel.add(UserNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 300, 40));

        MovieDescLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieDescLabel.setForeground(new java.awt.Color(255, 255, 255));
        MovieDescLabel.setText("Movie Desc:");
        MovieBookingMainPanel.add(MovieDescLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 110, 30));

        MovieDescTextArea.setEditable(false);
        MovieDescTextArea.setColumns(20);
        MovieDescTextArea.setFont(new java.awt.Font("Trebuchet MS", 3, 18)); // NOI18N
        MovieDescTextArea.setRows(5);
        MovieDescScrollPane.setViewportView(MovieDescTextArea);

        MovieBookingMainPanel.add(MovieDescScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 300, 120));

        LanguageLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        LanguageLabel.setForeground(new java.awt.Color(255, 255, 255));
        LanguageLabel.setText("Language:");
        MovieBookingMainPanel.add(LanguageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, 100, 30));

        LanguageComboBox.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(LanguageComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 270, 40));

        SeatsLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        SeatsLabel.setForeground(new java.awt.Color(255, 255, 255));
        SeatsLabel.setText("No.Of Seats:");
        MovieBookingMainPanel.add(SeatsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 470, 110, 30));

        SeatsTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        SeatsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SeatsTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SeatsTextFieldKeyReleased(evt);
            }
        });
        MovieBookingMainPanel.add(SeatsTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 500, 110, 40));

        TicketPriceLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TicketPriceLabel.setForeground(new java.awt.Color(255, 255, 255));
        TicketPriceLabel.setText("Ticket Price:");
        MovieBookingMainPanel.add(TicketPriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, 120, 30));

        TicketPriceTextField.setEditable(false);
        TicketPriceTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(TicketPriceTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 140, 40));

        TotalLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TotalLabel.setForeground(new java.awt.Color(255, 255, 255));
        TotalLabel.setText("Total:");
        MovieBookingMainPanel.add(TotalLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 570, 60, 30));

        TotalTextField.setEditable(false);
        TotalTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(TotalTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 600, 150, 40));

        MovieLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieLabel.setForeground(new java.awt.Color(255, 255, 255));
        MovieLabel.setText("Movie:");
        MovieBookingMainPanel.add(MovieLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 110, 60, 30));

        MovieComboBox.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(MovieComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 260, 40));

        LocationLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        LocationLabel.setForeground(new java.awt.Color(255, 255, 255));
        LocationLabel.setText("Location:");
        MovieBookingMainPanel.add(LocationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 210, 150, 30));

        LocationComboBox.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(LocationComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 260, 40));

        TheatherLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheatherLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheatherLabel.setText("Theather:");
        MovieBookingMainPanel.add(TheatherLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 90, 30));

        TheatherComboBox.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(TheatherComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 260, 40));

        DateLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DateLabel.setForeground(new java.awt.Color(255, 255, 255));
        DateLabel.setText("Date:");
        MovieBookingMainPanel.add(DateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 410, 60, 30));

        DateChooser.setToolTipText("Date");
        DateChooser.setDateFormatString("dd-MM-y");
        DateChooser.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(DateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 440, 260, 50));

        TimeLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        TimeLabel.setText("Time:");
        MovieBookingMainPanel.add(TimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 520, 90, 30));

        TimeComboBox.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(TimeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 550, 260, 40));

        MBBookButton.setBackground(new java.awt.Color(153, 255, 102));
        MBBookButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MBBookButton.setText("Book");
        MBBookButton.setBorderPainted(false);
        MBBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBBookButtonActionPerformed(evt);
            }
        });
        MovieBookingMainPanel.add(MBBookButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 750, 210, 50));

        MBClearButton.setBackground(new java.awt.Color(255, 102, 102));
        MBClearButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MBClearButton.setText("Clear");
        MBClearButton.setBorderPainted(false);
        MBClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBClearButtonActionPerformed(evt);
            }
        });
        MovieBookingMainPanel.add(MBClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 750, 210, 50));

        MBPayButton.setBackground(new java.awt.Color(255, 51, 255));
        MBPayButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MBPayButton.setText("Pay");
        MBPayButton.setBorderPainted(false);
        MBPayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBPayButtonActionPerformed(evt);
            }
        });
        MovieBookingMainPanel.add(MBPayButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 750, 210, 50));

        AvaliableListLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AvaliableListLabel.setForeground(new java.awt.Color(255, 255, 255));
        AvaliableListLabel.setText("Avaliable List:");
        MovieBookingMainPanel.add(AvaliableListLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 140, 30));

        AvaliableListTable.setAutoCreateRowSorter(true);
        AvaliableListTable.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        AvaliableListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "THEATHER", "MOVIE", "DESCRIPTION", "TICKET PRICE", "TIME", "DATE", "LOCATION", "LANGUAGE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AvaliableListTable.setCellSelectionEnabled(true);
        AvaliableListTable.setGridColor(new java.awt.Color(102, 153, 255));
        AvaliableListTable.setInheritsPopupMenu(true);
        AvaliableListTable.setShowGrid(true);
        AvaliableListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AvaliableListTableMouseClicked(evt);
            }
        });
        AvaliableListScrollPane.setViewportView(AvaliableListTable);
        AvaliableListTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        MovieBookingMainPanel.add(AvaliableListScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(762, 130, 730, 380));

        BookedListLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        BookedListLabel.setForeground(new java.awt.Color(255, 255, 255));
        BookedListLabel.setText("Booking:");
        MovieBookingMainPanel.add(BookedListLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 520, 140, 30));

        UserBooked.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        UserBooked.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "USER", "MOVIE", "LANGUAGE", "LOCATION", "THEATHER", "TIME", "DATE", "NO. OF TICKET", "PRICE", "TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        UserBooked.setCellSelectionEnabled(true);
        UserBooked.setInheritsPopupMenu(true);
        UserBooked.setShowGrid(true);
        UserBookedScrollPane.setViewportView(UserBooked);
        UserBooked.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        MovieBookingMainPanel.add(UserBookedScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 550, 730, 270));

        RefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.setToolTipText("Refresh");
        RefreshButton.setBorder(null);
        RefreshButton.setBorderPainted(false);
        RefreshButton.setContentAreaFilled(false);
        RefreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RefreshButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RefreshButtonMouseClicked(evt);
            }
        });
        MovieBookingMainPanel.add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 50, 50));

        MBSubmitConfirmTextField.setEditable(false);
        MBSubmitConfirmTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        MovieBookingMainPanel.add(MBSubmitConfirmTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 20, 190, 30));

        MovieBookingBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/wesley_tingey_1500px.jpg"))); // NOI18N
        MovieBookingMainPanel.add(MovieBookingBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1500, 830));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MovieBookingMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MovieBookingMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1501, 826));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_CloseButtonMouseClicked

    private void MinimizeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinimizeButtonMouseClicked

    private void MaximizeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaximizeButtonMouseClicked
        if(this.getExtendedState()!= MovieBooking.MAXIMIZED_BOTH){
            this.setExtendedState(MovieBooking.MAXIMIZED_BOTH);
        }
        else{
            this.setExtendedState(MovieBooking.NORMAL);
        }
    }//GEN-LAST:event_MaximizeButtonMouseClicked

    private void MBClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBClearButtonActionPerformed
        MovieDescTextArea.setText("");
        LanguageComboBox.setSelectedItem("");
        SeatsTextField.setText("");
        TicketPriceTextField.setText("");
        TotalTextField.setText("");
        MovieComboBox.setSelectedItem("");
        LocationComboBox.setSelectedItem("");
        TheatherComboBox.setSelectedItem("");
        DateChooser.setDate(null);
        TimeComboBox.setSelectedItem("");
    }//GEN-LAST:event_MBClearButtonActionPerformed

    private void AvaliableListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AvaliableListTableMouseClicked
        try {
            DefaultTableModel Df = (DefaultTableModel)AvaliableListTable.getModel();
            int selectedIndex = AvaliableListTable.getSelectedRow();
            TheatherComboBox.setSelectedItem(Df.getValueAt(selectedIndex, 1).toString());
            MovieComboBox.setSelectedItem(Df.getValueAt(selectedIndex, 2).toString());
            MovieDescTextArea.setText(Df.getValueAt(selectedIndex, 3).toString());
            TicketPriceTextField.setText(Df.getValueAt(selectedIndex, 4).toString());
            TimeComboBox.setSelectedItem(Df.getValueAt(selectedIndex, 5).toString());
            java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)Df.getValueAt(selectedIndex, 6));
            DateChooser.setDate(date);
            LocationComboBox.setSelectedItem(Df.getValueAt(selectedIndex, 7).toString());
            LanguageComboBox.setSelectedItem(Df.getValueAt(selectedIndex, 8).toString());
            SeatsTextField.setText("");
            TotalTextField.setText("");
        }
        catch (ParseException ex) {
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Avaliable List Fetching Error Occuring!" , "Avaliable List Fetching", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AvaliableListTableMouseClicked

    private void RefreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshButtonMouseClicked
        avaliable_table();
        booking_table();
        MovieDescTextArea.setText("");
        LanguageComboBox.setSelectedItem("");
        SeatsTextField.setText("");
        TicketPriceTextField.setText("");
        TotalTextField.setText("");
        MovieComboBox.setSelectedItem("");
        LocationComboBox.setSelectedItem("");
        TheatherComboBox.setSelectedItem("");
        DateChooser.setDate(null);
        TimeComboBox.setSelectedItem("");
    }//GEN-LAST:event_RefreshButtonMouseClicked

    private void SeatsTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SeatsTextFieldKeyPressed
       String cprice = SeatsTextField.getText();
        int length = cprice.length();
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            if(length <= 0){ 
                SeatsTextField.setEditable(true);
            }
            else{
                SeatsTextField.setEditable(false);
            }
        }
        else{
            if(evt.getExtendedKeyCode()== KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()== KeyEvent.VK_DELETE){
                SeatsTextField.setEditable(true);
            }
            else{
                SeatsTextField.setEditable(false); 
            }
        }
    }//GEN-LAST:event_SeatsTextFieldKeyPressed

    private void MBBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBBookButtonActionPerformed
        String bookuname = UserNameTextField.getText();
        String booklanguage = LanguageComboBox.getSelectedItem().toString();
        String bookseats = SeatsTextField.getText();
        String bookprice = TicketPriceTextField.getText();
        String booktotal = TotalTextField.getText();
        String bookmovie = MovieComboBox.getSelectedItem().toString();
        String booklocation = LocationComboBox.getSelectedItem().toString();
        String booktheather = TheatherComboBox.getSelectedItem().toString();  
        SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");  
        String bookdate = Date_Format.format(DateChooser.getDate());
        String booktime = TimeComboBox.getSelectedItem().toString();  
        if(bookuname.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Login Again! or Login Failed! Because You Manually Redirected The User Login Procedure" , 
                    "Session User Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(booklanguage.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Language" , "Language Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(bookseats.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Enter The No. Of Seats" , "No. Of Seats", JOptionPane.WARNING_MESSAGE);
        }
        else if(bookprice.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select Price From The Avaliable Table" , "Price For Select Movie", JOptionPane.WARNING_MESSAGE);
        }
        else if(booktotal.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select No. Of Seats" , "Total Price", JOptionPane.WARNING_MESSAGE);
        }
        else if(bookmovie.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Movie" , "Movie Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(booklocation.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Location" , "Theather Location", JOptionPane.WARNING_MESSAGE);
        }
        else if(booktheather.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Theather" , "Theather Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(booktime.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Select The Time" , "Boook Time", JOptionPane.WARNING_MESSAGE);
        }
        else{
            PreparedStatement ps;
            String BookMovieQuery = "INSERT INTO `bookmovie`(`BOOK_USER`, `BOOK_MOVIE`, `BOOK_LANGUAGE`, `BOOK_THEATHER`,`BOOK_LOCATION`, "
                    + "`BOOK_TIME`, `BOOK_DATE`, `BOOK_SEATS`, `BOOK_PRICE`, `BOOK_TOTAL`)"
                    + " VALUES (?,?,?,?,?,?,?,?,?,?)";
            try{
                ps = MyConnection.getConnection().prepareStatement(BookMovieQuery);
                ps.setString(1, bookuname);
                ps.setString(2, bookmovie);
                ps.setString(3, booklanguage);
                ps.setString(4, booktheather);
                ps.setString(5, booklocation);
                ps.setString(6, booktime);
                ps.setString(7, bookdate);
                ps.setString(8, bookseats);
                ps.setString(9, bookprice);
                ps.setString(10, booktotal);
                if(ps.executeUpdate() > 0){
                    booking_table();
                    JOptionPane.showMessageDialog(null,"Movie Booking Slot Has Been Successfully Assigned" , "Movie Booking Slot", JOptionPane.INFORMATION_MESSAGE);
                    JOptionPane.showMessageDialog(null,"Please Select Book Button For Booking" , "Booking", JOptionPane.INFORMATION_MESSAGE);
                    MBSubmitConfirmTextField.setText("Submitted");
                }
                else{
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Movie Booking Failed!" , "Movie Booking", JOptionPane.INFORMATION_MESSAGE);
                }
            } 
            catch (SQLException ex) 
               {
                    Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Movie Details Insertion Error Occuring!", "Insertion Error Message", JOptionPane.ERROR_MESSAGE);
               }
        }
    }//GEN-LAST:event_MBBookButtonActionPerformed

    private void SeatsTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SeatsTextFieldKeyReleased
        int bseats = Integer.parseInt(SeatsTextField.getText());
        int bprice = Integer.parseInt(TicketPriceTextField.getText());
        String btotal = String.valueOf(bseats*bprice);
        TotalTextField.setText(btotal);
    }//GEN-LAST:event_SeatsTextFieldKeyReleased

    private void MBPayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBPayButtonActionPerformed
        String validatesubmitconfirm = MBSubmitConfirmTextField.getText();
        String validateseats = SeatsTextField.getText();
        String validatetotal = TotalTextField.getText();
        if(validateseats.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Book Ticket, Before Pay For Movie Ticket" , "Booking Error", JOptionPane.WARNING_MESSAGE);
        }
        else if(validatetotal.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Book Ticket, Before Pay For Movie Ticket" , "Booking Error", JOptionPane.WARNING_MESSAGE);
        }
        else if(validatesubmitconfirm.equals("")){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Please Book Ticket, Before Pay For Movie Ticket" , "Booking Error", JOptionPane.WARNING_MESSAGE);
        }
        else{
            BookConfirm bc = new BookConfirm();
            String sprice = TotalTextField.getText();
            String bookuname = UserNameTextField.getText();
            bc.setVisible(true); 
            bc.pack(); 
            bc.setLocationRelativeTo(null); 
            bc.setExtendedState(JFrame.EXIT_ON_CLOSE);
            bc.TotalPriceTextField.setText(sprice);
            bc.PaymentAmountTextField.setText(sprice);
            bc.UserCTextField.setText(bookuname);
        }
    }//GEN-LAST:event_MBPayButtonActionPerformed

    private void MovieFieldUpdate(){
        try{
            String moviequery ="SELECT DISTINCT `MOVIE_NAME` FROM `moviedetails`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviequery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              MovieComboBox.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Movies Fetching Error!" , "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void LanguageFieldUpdate(){
        try{
            String moviequery ="SELECT DISTINCT `MOVIE_LANGUAGE` FROM `moviedetails`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviequery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              LanguageComboBox.addItem(rs.getString(1));
            } 
        }
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Language Fetching Error!" , "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void LocationFieldUpdate(){
        try{
            String moviequery ="SELECT DISTINCT `MOVIE_LOCATION` FROM `moviedetails`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviequery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              LocationComboBox.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Location Fetching Error!" , "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void  TheatherFieldUpdate(){
        try{
            String moviequery ="SELECT DISTINCT `MOVIE_THEATRE` FROM `moviedetails`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviequery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              TheatherComboBox.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Theather Fetching Error!" , "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void TimeFieldUpdate(){
        try{
            String moviequery ="SELECT DISTINCT `MOVIE_TIME` FROM `moviedetails`";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(moviequery);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
              TimeComboBox.addItem(rs.getString(1));
            } 
        } 
        catch(SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Time Fetching Error!" , "Fetching Error", JOptionPane.ERROR_MESSAGE);
           }
    }
    
    private void avaliable_table(){
        int c;
        try{
            PreparedStatement ps;
            String TableQuery = "SELECT * FROM `moviedetails`";
            ps = MyConnection.getConnection().prepareStatement(TableQuery);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            c = rsmd.getColumnCount();
            DefaultTableModel Df = (DefaultTableModel)AvaliableListTable.getModel();
            Df.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for(int a=1; a<=c; a++){
                    v2.add(rs.getString("MOVIE_ID"));
                    v2.add(rs.getString("MOVIE_THEATRE"));
                    v2.add(rs.getString("MOVIE_NAME"));
                    v2.add(rs.getString("MOVIE_DESC"));
                    v2.add(rs.getString("MOVIE_PRICE"));
                    v2.add(rs.getString("MOVIE_TIME"));
                    v2.add(rs.getString("MOVIE_DATE"));
                    v2.add(rs.getString("MOVIE_LOCATION"));
                    v2.add(rs.getString("MOVIE_LANGUAGE"));
                }
                Df.addRow(v2);
            }                        
        } 
        catch (SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Avaliable Tabel Data Collection Error Occuring!" , "Avaliable Tabel Error Message", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void booking_table(){
        int r;
        try{
            PreparedStatement ps;
            String uuser = UserNameTextField.getText();
            String TableQuery = "SELECT * FROM `bookmovie` WHERE BOOK_USER = ?";
            ps = MyConnection.getConnection().prepareStatement(TableQuery);
            ps.setString(1, uuser);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            r = rsmd.getColumnCount(); 
            DefaultTableModel Dft = (DefaultTableModel)UserBooked.getModel();
            Dft.setRowCount(0);
            while(rs.next()){
                Vector vr2 = new Vector();
                for(int a=1; a<=r; a++){
                    vr2.add(rs.getString("BOOK_ID"));
                    vr2.add(rs.getString("BOOK_USER"));
                    vr2.add(rs.getString("BOOK_MOVIE"));
                    vr2.add(rs.getString("BOOK_LANGUAGE"));
                    vr2.add(rs.getString("BOOK_LOCATION"));
                    vr2.add(rs.getString("BOOK_THEATHER"));
                    vr2.add(rs.getString("BOOK_TIME"));
                    vr2.add(rs.getString("BOOK_DATE"));
                    vr2.add(rs.getString("BOOK_SEATS"));
                    vr2.add(rs.getString("BOOK_PRICE"));
                    vr2.add(rs.getString("BOOK_TOTAL"));
                }
                Dft.addRow(vr2);
            }                        
        } 
        catch (SQLException ex){
            Logger.getLogger(MovieBooking.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"User Booking Tabel Data Collection Error Occuring!" , "User Booking Tabel Error Message", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AvaliableListLabel;
    private javax.swing.JScrollPane AvaliableListScrollPane;
    private javax.swing.JTable AvaliableListTable;
    private javax.swing.JLabel BookedListLabel;
    private javax.swing.JLabel CloseButton;
    private javax.swing.JLabel CompanyLogo;
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JComboBox<String> LanguageComboBox;
    private javax.swing.JLabel LanguageLabel;
    private javax.swing.JComboBox<String> LocationComboBox;
    private javax.swing.JLabel LocationLabel;
    private javax.swing.JButton MBBookButton;
    private javax.swing.JButton MBClearButton;
    private javax.swing.JButton MBPayButton;
    private javax.swing.JTextField MBSubmitConfirmTextField;
    private javax.swing.JLabel MaximizeButton;
    private javax.swing.JLabel MinimizeButton;
    private javax.swing.JLabel MovieBookingBgImg;
    private javax.swing.JPanel MovieBookingMainPanel;
    private javax.swing.JComboBox<String> MovieComboBox;
    private javax.swing.JLabel MovieDescLabel;
    private javax.swing.JScrollPane MovieDescScrollPane;
    private javax.swing.JTextArea MovieDescTextArea;
    private javax.swing.JLabel MovieLabel;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel SeatsLabel;
    private javax.swing.JTextField SeatsTextField;
    private javax.swing.JComboBox<String> TheatherComboBox;
    private javax.swing.JLabel TheatherLabel;
    private javax.swing.JLabel TicketPriceLabel;
    private javax.swing.JTextField TicketPriceTextField;
    private javax.swing.JComboBox<String> TimeComboBox;
    private javax.swing.JLabel TimeLabel;
    private javax.swing.JLabel TotalLabel;
    private javax.swing.JTextField TotalTextField;
    private javax.swing.JTable UserBooked;
    private javax.swing.JScrollPane UserBookedScrollPane;
    private javax.swing.JLabel UserNameLabel;
    public javax.swing.JTextField UserNameTextField;
    // End of variables declaration//GEN-END:variables
}
