package Omtbs;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/* @author richu */
public class SuperAdminHome extends javax.swing.JFrame {

    /* Creates new form SuperAdminHome */
    public SuperAdminHome() {
        initComponents();
        this.SAHHidePassIcon.setVisible(false);
        FieldFetch();
        Adminlistfetch();
        Approve();
        theater_add_table();
        feedbackfetch();
        transprent_color();   
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        TopPanel = new javax.swing.JPanel();
        LogoutLabel = new javax.swing.JLabel();
        MessageLabel = new javax.swing.JLabel();
        WelcomeUserLabel = new javax.swing.JLabel();
        CloseButtonIcon = new javax.swing.JButton();
        MinimizeButtonIcon = new javax.swing.JButton();
        MaximizeButtonIcon = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        TopBgImg = new javax.swing.JLabel();
        SidePanel = new javax.swing.JPanel();
        DetailButton = new javax.swing.JButton();
        AdminListButton = new javax.swing.JButton();
        ApprovelButton = new javax.swing.JButton();
        AddTheaterButton = new javax.swing.JButton();
        FeedbackButton = new javax.swing.JButton();
        CheckForUpdateButton = new javax.swing.JButton();
        SideBgImg = new javax.swing.JLabel();
        ContentTabbedPane = new javax.swing.JTabbedPane();
        DetailPanel = new javax.swing.JPanel();
        DetailsNameLabel = new javax.swing.JLabel();
        DetailsNameTextField = new javax.swing.JTextField();
        DetailsEmailIdLabel = new javax.swing.JLabel();
        DetailsEmailIdTextField = new javax.swing.JTextField();
        DetailsPasswordLabel = new javax.swing.JLabel();
        DetailsPasswordField = new javax.swing.JPasswordField();
        SAHShowPassIcon = new javax.swing.JLabel();
        SAHHidePassIcon = new javax.swing.JLabel();
        DetailsUpdateButton = new javax.swing.JButton();
        DetailsAddressLabel = new javax.swing.JLabel();
        DetailsAddressScrollPane = new javax.swing.JScrollPane();
        DetailsAddressTextArea = new javax.swing.JTextArea();
        DetailsRoleLabel = new javax.swing.JLabel();
        DetailsRoleTextField = new javax.swing.JTextField();
        DetailsTimeStampLabel = new javax.swing.JLabel();
        DetailsTimeStampTextField = new javax.swing.JTextField();
        DetailsCalendar = new com.toedter.calendar.JCalendar();
        DetailsNoteLabel = new javax.swing.JLabel();
        DetailsNoteLabel1 = new javax.swing.JLabel();
        DetailsEditToggleButton = new javax.swing.JToggleButton();
        DetailsBgImg = new javax.swing.JLabel();
        AdminListPanel = new javax.swing.JPanel();
        AdminListLabel = new javax.swing.JLabel();
        AdminListScrollPane = new javax.swing.JScrollPane();
        AdminListTable = new javax.swing.JTable();
        ApprovelPanel = new javax.swing.JPanel();
        AdminSlotApprovelLabel = new javax.swing.JLabel();
        AdminSlotApprovelScrollPane = new javax.swing.JScrollPane();
        AdminSlotApprovelTable = new javax.swing.JTable();
        ApprovelSetLabel = new javax.swing.JLabel();
        ApprovelSetTextField = new javax.swing.JTextField();
        ApprovelUpdateButton = new javax.swing.JButton();
        ApprovelNoteLabel = new javax.swing.JLabel();
        ApprovelNoteLabel1 = new javax.swing.JLabel();
        ApprovelNoteLabel2 = new javax.swing.JLabel();
        ApprovelNoteLabel3 = new javax.swing.JLabel();
        ApprovelToggleButton = new javax.swing.JToggleButton();
        AddTheatherPanel = new javax.swing.JPanel();
        TheaterNameLabel = new javax.swing.JLabel();
        TheaterNameTextField = new javax.swing.JTextField();
        TheaterLocationLabel = new javax.swing.JLabel();
        TheaterLocationTextField = new javax.swing.JTextField();
        TheaterAddressLabel = new javax.swing.JLabel();
        TheaterAddressScrollPane = new javax.swing.JScrollPane();
        TheaterAddressTextArea = new javax.swing.JTextArea();
        TheaterCapacityLabel = new javax.swing.JLabel();
        TheaterCapacityTextField = new javax.swing.JTextField();
        TheaterAddButton = new javax.swing.JButton();
        TheaterUpdateButton = new javax.swing.JButton();
        TheaterDeleteButton = new javax.swing.JButton();
        TheaterTableScrollPane = new javax.swing.JScrollPane();
        TheaterTable = new javax.swing.JTable();
        TheaterNoteLabel = new javax.swing.JLabel();
        TheaterNoteLabel1 = new javax.swing.JLabel();
        ContactsPanel = new javax.swing.JPanel();
        FeedbackReportLabel = new javax.swing.JLabel();
        FeedbackTableScrollPane = new javax.swing.JScrollPane();
        FeedbackTable = new javax.swing.JTable();
        FeedbackTextareaScrollPane = new javax.swing.JScrollPane();
        FeedbackTextArea = new javax.swing.JTextArea();
        FeedbackDeleteButton = new javax.swing.JButton();
        MainBgImg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Super Admin Home");
        setLocationByPlatform(true);
        setName("SuperAdminHomeFrame"); // NOI18N
        setUndecorated(true);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TopPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LogoutLabel.setFont(new java.awt.Font("Trebuchet MS", 3, 24)); // NOI18N
        LogoutLabel.setForeground(new java.awt.Color(255, 255, 255));
        LogoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/log-out_50px.png"))); // NOI18N
        LogoutLabel.setText("Logout");
        LogoutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LogoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutLabelMouseClicked(evt);
            }
        });
        TopPanel.add(LogoutLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 220, -1));

        MessageLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        MessageLabel.setForeground(new java.awt.Color(255, 255, 255));
        MessageLabel.setText("WELCOME:");
        TopPanel.add(MessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 50));

        WelcomeUserLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        WelcomeUserLabel.setForeground(new java.awt.Color(255, 255, 255));
        WelcomeUserLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        TopPanel.add(WelcomeUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 380, 50));

        CloseButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Cross_50px.png"))); // NOI18N
        CloseButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CloseButtonIcon.setBorderPainted(false);
        CloseButtonIcon.setContentAreaFilled(false);
        CloseButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CloseButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Cross_50px.png"))); // NOI18N
        CloseButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseButtonIconMouseClicked(evt);
            }
        });
        TopPanel.add(CloseButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1400, 10, 50, 50));

        MinimizeButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Minimize_50px.png"))); // NOI18N
        MinimizeButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MinimizeButtonIcon.setBorderPainted(false);
        MinimizeButtonIcon.setContentAreaFilled(false);
        MinimizeButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MinimizeButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Minimize_50px.png"))); // NOI18N
        MinimizeButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeButtonIconMouseClicked(evt);
            }
        });
        TopPanel.add(MinimizeButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 10, 50, 50));

        MaximizeButtonIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Maximize_50px.png"))); // NOI18N
        MaximizeButtonIcon.setText("jButton2");
        MaximizeButtonIcon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MaximizeButtonIcon.setBorderPainted(false);
        MaximizeButtonIcon.setContentAreaFilled(false);
        MaximizeButtonIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaximizeButtonIcon.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Maximize_50px.png"))); // NOI18N
        MaximizeButtonIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MaximizeButtonIconMouseClicked(evt);
            }
        });
        TopPanel.add(MaximizeButtonIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 10, 50, 50));

        RefreshButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        RefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.setBorder(null);
        RefreshButton.setBorderPainted(false);
        RefreshButton.setContentAreaFilled(false);
        RefreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RefreshButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Reload_50px.png"))); // NOI18N
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        TopPanel.add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 10, 50, 50));

        TopBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Drew-beamer_1460px.jpg"))); // NOI18N
        TopPanel.add(TopBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1460, 70));

        MainPanel.add(TopPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1460, 70));

        SidePanel.setBackground(new java.awt.Color(204, 255, 255));
        SidePanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        SidePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DetailButton.setBackground(new java.awt.Color(255, 51, 102));
        DetailButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailButton.setForeground(new java.awt.Color(255, 255, 255));
        DetailButton.setText("DETAILS");
        DetailButton.setBorderPainted(false);
        DetailButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailButtonActionPerformed(evt);
            }
        });
        SidePanel.add(DetailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 170, 50));

        AdminListButton.setBackground(new java.awt.Color(255, 255, 51));
        AdminListButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AdminListButton.setText("ADMIN LIST");
        AdminListButton.setBorderPainted(false);
        AdminListButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AdminListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminListButtonActionPerformed(evt);
            }
        });
        SidePanel.add(AdminListButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 170, 50));

        ApprovelButton.setBackground(new java.awt.Color(153, 255, 51));
        ApprovelButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelButton.setText("APPROVEL");
        ApprovelButton.setBorderPainted(false);
        ApprovelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApprovelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovelButtonActionPerformed(evt);
            }
        });
        SidePanel.add(ApprovelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 170, 50));

        AddTheaterButton.setBackground(new java.awt.Color(0, 255, 204));
        AddTheaterButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AddTheaterButton.setText("ADD THEATER");
        AddTheaterButton.setBorderPainted(false);
        AddTheaterButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddTheaterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTheaterButtonActionPerformed(evt);
            }
        });
        SidePanel.add(AddTheaterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, 170, 50));

        FeedbackButton.setBackground(new java.awt.Color(102, 102, 255));
        FeedbackButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        FeedbackButton.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackButton.setText("FEEDBACK");
        FeedbackButton.setBorderPainted(false);
        FeedbackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FeedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackButtonActionPerformed(evt);
            }
        });
        SidePanel.add(FeedbackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 620, 170, 50));

        CheckForUpdateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        CheckForUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        CheckForUpdateButton.setText("Check For Updates");
        CheckForUpdateButton.setBorderPainted(false);
        CheckForUpdateButton.setContentAreaFilled(false);
        CheckForUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckForUpdateButtonActionPerformed(evt);
            }
        });
        SidePanel.add(CheckForUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 720, 170, 30));

        SideBgImg.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        SideBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/william-daigneault_220px.jpg"))); // NOI18N
        SidePanel.add(SideBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 760));

        MainPanel.add(SidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 760));

        ContentTabbedPane.setBackground(new java.awt.Color(255, 255, 204));
        ContentTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        ContentTabbedPane.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N

        DetailPanel.setBackground(new java.awt.Color(102, 102, 255));
        DetailPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DetailsNameLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsNameLabel.setText("SUPER ADMIN NAME:");
        DetailPanel.add(DetailsNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 180, 30));

        DetailsNameTextField.setEditable(false);
        DetailsNameTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsNameTextField.setBorder(null);
        DetailPanel.add(DetailsNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 370, 30));

        DetailsEmailIdLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsEmailIdLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsEmailIdLabel.setText("SUPER ADMIN EMAIL ID:");
        DetailPanel.add(DetailsEmailIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 230, 30));

        DetailsEmailIdTextField.setEditable(false);
        DetailsEmailIdTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsEmailIdTextField.setBorder(null);
        DetailPanel.add(DetailsEmailIdTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, 370, 30));

        DetailsPasswordLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsPasswordLabel.setText("SUPER ADMIN PASSWORD:");
        DetailPanel.add(DetailsPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 230, 30));

        DetailsPasswordField.setEditable(false);
        DetailsPasswordField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsPasswordField.setBorder(null);
        DetailPanel.add(DetailsPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 370, 30));

        SAHShowPassIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/lock_40px.png"))); // NOI18N
        SAHShowPassIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SAHShowPassIcon.setIconTextGap(0);
        SAHShowPassIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SAHShowPassIconMousePressed(evt);
            }
        });
        DetailPanel.add(SAHShowPassIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 170, -1, 60));

        SAHHidePassIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/unlock_40px.png"))); // NOI18N
        SAHHidePassIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SAHHidePassIcon.setIconTextGap(0);
        SAHHidePassIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SAHHidePassIconMousePressed(evt);
            }
        });
        DetailPanel.add(SAHHidePassIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 170, -1, 60));

        DetailsUpdateButton.setBackground(new java.awt.Color(255, 102, 102));
        DetailsUpdateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        DetailsUpdateButton.setText("UPDATE");
        DetailsUpdateButton.setBorderPainted(false);
        DetailsUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailsUpdateButtonActionPerformed(evt);
            }
        });
        DetailPanel.add(DetailsUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 670, 210, 50));

        DetailsAddressLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsAddressLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsAddressLabel.setText("SUPER ADMIN ADDRESS:");
        DetailPanel.add(DetailsAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 210, 30));

        DetailsAddressTextArea.setEditable(false);
        DetailsAddressTextArea.setColumns(20);
        DetailsAddressTextArea.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsAddressTextArea.setRows(5);
        DetailsAddressTextArea.setBorder(null);
        DetailsAddressScrollPane.setViewportView(DetailsAddressTextArea);

        DetailPanel.add(DetailsAddressScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, 370, 150));

        DetailsRoleLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsRoleLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsRoleLabel.setText("SUPER ADMIN ROLE:");
        DetailPanel.add(DetailsRoleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 210, 30));

        DetailsRoleTextField.setEditable(false);
        DetailsRoleTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsRoleTextField.setBorder(null);
        DetailPanel.add(DetailsRoleTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 450, 370, 30));

        DetailsTimeStampLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsTimeStampLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsTimeStampLabel.setText("SUPER ADMIN TIME STAMP:");
        DetailPanel.add(DetailsTimeStampLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 240, 30));

        DetailsTimeStampTextField.setEditable(false);
        DetailsTimeStampTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsTimeStampTextField.setBorder(null);
        DetailPanel.add(DetailsTimeStampTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 530, 370, 30));

        DetailsCalendar.setBackground(new java.awt.Color(255, 255, 255));
        DetailsCalendar.setDecorationBackgroundColor(new java.awt.Color(204, 255, 204));
        DetailsCalendar.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsCalendar.setTodayButtonVisible(true);
        DetailPanel.add(DetailsCalendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 500, 520));

        DetailsNoteLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsNoteLabel.setForeground(new java.awt.Color(255, 255, 255));
        DetailsNoteLabel.setText("Note: Please Not That Any Changes May Affect The Super Admin Login Details");
        DetailPanel.add(DetailsNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 660, 680, 40));

        DetailsNoteLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsNoteLabel1.setForeground(new java.awt.Color(255, 255, 255));
        DetailsNoteLabel1.setText("So, Be Carefully When Changing Or Update");
        DetailPanel.add(DetailsNoteLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 690, 380, 40));

        DetailsEditToggleButton.setBackground(new java.awt.Color(255, 255, 153));
        DetailsEditToggleButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        DetailsEditToggleButton.setSelected(true);
        DetailsEditToggleButton.setText("EDIT");
        DetailsEditToggleButton.setBorder(null);
        DetailsEditToggleButton.setBorderPainted(false);
        DetailsEditToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DetailsEditToggleButtonItemStateChanged(evt);
            }
        });
        DetailsEditToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailsEditToggleButtonActionPerformed(evt);
            }
        });
        DetailPanel.add(DetailsEditToggleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 670, 200, 50));

        DetailsBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Sand_1460px.jpg"))); // NOI18N
        DetailPanel.add(DetailsBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1240, 770));

        ContentTabbedPane.addTab("DETAILS", DetailPanel);

        AdminListPanel.setBackground(new java.awt.Color(204, 204, 255));
        AdminListPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AdminListPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AdminListLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AdminListLabel.setForeground(new java.awt.Color(255, 255, 255));
        AdminListLabel.setText("ADMIN LIST:");
        AdminListPanel.add(AdminListLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 110, 40));

        AdminListTable.setAutoCreateRowSorter(true);
        AdminListTable.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        AdminListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ADMIN ID", "ADMIN NAME", "EMAIL ID", "ADDRESS", "ROLE", "APPROVEL", "TIMESTAMP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AdminListScrollPane.setViewportView(AdminListTable);
        if (AdminListTable.getColumnModel().getColumnCount() > 0) {
            AdminListTable.getColumnModel().getColumn(3).setHeaderValue("ADDRESS");
            AdminListTable.getColumnModel().getColumn(6).setHeaderValue("TIMESTAMP");
        }

        AdminListPanel.add(AdminListScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 1090, 700));

        ContentTabbedPane.addTab("ADMIN LIST", AdminListPanel);

        ApprovelPanel.setBackground(new java.awt.Color(255, 204, 204));
        ApprovelPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AdminSlotApprovelLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AdminSlotApprovelLabel.setForeground(new java.awt.Color(255, 255, 255));
        AdminSlotApprovelLabel.setText("Admin Slot Approvel:");
        ApprovelPanel.add(AdminSlotApprovelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 190, 67));

        AdminSlotApprovelTable.setAutoCreateRowSorter(true);
        AdminSlotApprovelTable.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        AdminSlotApprovelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ADMIN ID", "ADMIN NAME", "EMAIL ID", "ROLE", "APPROVEL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AdminSlotApprovelTable.setIntercellSpacing(new java.awt.Dimension(3, 3));
        AdminSlotApprovelTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AdminSlotApprovelTableMouseClicked(evt);
            }
        });
        AdminSlotApprovelScrollPane.setViewportView(AdminSlotApprovelTable);

        ApprovelPanel.add(AdminSlotApprovelScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 1010, 700));

        ApprovelSetLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelSetLabel.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelSetLabel.setText("SET:");
        ApprovelPanel.add(ApprovelSetLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 50, 30));

        ApprovelSetTextField.setEditable(false);
        ApprovelSetTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelSetTextField.setBorder(null);
        ApprovelPanel.add(ApprovelSetTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 190, 40));

        ApprovelUpdateButton.setBackground(new java.awt.Color(255, 51, 51));
        ApprovelUpdateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelUpdateButton.setText("Update");
        ApprovelUpdateButton.setBorder(null);
        ApprovelUpdateButton.setBorderPainted(false);
        ApprovelUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovelUpdateButtonActionPerformed(evt);
            }
        });
        ApprovelPanel.add(ApprovelUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 190, 40));

        ApprovelNoteLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelNoteLabel.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelNoteLabel.setText("NOTE: If You Want To");
        ApprovelPanel.add(ApprovelNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, 190, 30));

        ApprovelNoteLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelNoteLabel1.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelNoteLabel1.setText("Approve Admin Slot - ");
        ApprovelPanel.add(ApprovelNoteLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, 190, 30));

        ApprovelNoteLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelNoteLabel2.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelNoteLabel2.setText("Change Set Field To: ");
        ApprovelPanel.add(ApprovelNoteLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 680, 190, 30));

        ApprovelNoteLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelNoteLabel3.setForeground(new java.awt.Color(255, 255, 255));
        ApprovelNoteLabel3.setText("APPROVED");
        ApprovelPanel.add(ApprovelNoteLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 710, 190, 30));

        ApprovelToggleButton.setBackground(new java.awt.Color(153, 255, 51));
        ApprovelToggleButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ApprovelToggleButton.setText("Edit");
        ApprovelToggleButton.setBorder(null);
        ApprovelToggleButton.setBorderPainted(false);
        ApprovelToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ApprovelToggleButtonItemStateChanged(evt);
            }
        });
        ApprovelToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovelToggleButtonActionPerformed(evt);
            }
        });
        ApprovelPanel.add(ApprovelToggleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 170, 40));

        ContentTabbedPane.addTab("APPROVEL", ApprovelPanel);

        AddTheatherPanel.setBackground(new java.awt.Color(255, 255, 102));
        AddTheatherPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AddTheatherPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TheaterNameLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheaterNameLabel.setText("THEATER NAME:");
        AddTheatherPanel.add(TheaterNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 190, 40));

        TheaterNameTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AddTheatherPanel.add(TheaterNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 330, 40));

        TheaterLocationLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterLocationLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheaterLocationLabel.setText("THEATER LOCATION:");
        AddTheatherPanel.add(TheaterLocationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 200, 40));

        TheaterLocationTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AddTheatherPanel.add(TheaterLocationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 330, 40));

        TheaterAddressLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterAddressLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheaterAddressLabel.setText("THEATER ADDRESS:");
        AddTheatherPanel.add(TheaterAddressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 190, 30));

        TheaterAddressTextArea.setColumns(20);
        TheaterAddressTextArea.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterAddressTextArea.setRows(5);
        TheaterAddressScrollPane.setViewportView(TheaterAddressTextArea);

        AddTheatherPanel.add(TheaterAddressScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, 330, 170));

        TheaterCapacityLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterCapacityLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheaterCapacityLabel.setText("THEATER CAPACITY:");
        AddTheatherPanel.add(TheaterCapacityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 200, 40));

        TheaterCapacityTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        AddTheatherPanel.add(TheaterCapacityTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 440, 330, 40));

        TheaterAddButton.setBackground(new java.awt.Color(255, 102, 102));
        TheaterAddButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterAddButton.setForeground(new java.awt.Color(255, 255, 255));
        TheaterAddButton.setText("ADD");
        TheaterAddButton.setBorderPainted(false);
        TheaterAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TheaterAddButtonActionPerformed(evt);
            }
        });
        AddTheatherPanel.add(TheaterAddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 150, 50));

        TheaterUpdateButton.setBackground(new java.awt.Color(102, 255, 51));
        TheaterUpdateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        TheaterUpdateButton.setText("UPDATE");
        TheaterUpdateButton.setBorderPainted(false);
        TheaterUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TheaterUpdateButtonActionPerformed(evt);
            }
        });
        AddTheatherPanel.add(TheaterUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 570, 150, 50));

        TheaterDeleteButton.setBackground(new java.awt.Color(255, 102, 102));
        TheaterDeleteButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterDeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        TheaterDeleteButton.setText("DELETE");
        TheaterDeleteButton.setBorderPainted(false);
        TheaterDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TheaterDeleteButtonActionPerformed(evt);
            }
        });
        AddTheatherPanel.add(TheaterDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, 160, 50));

        TheaterTable.setAutoCreateRowSorter(true);
        TheaterTable.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        TheaterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "THEATER ID", "THEATER NAME", "THEATER LOCATION", "THEATER ADDRESS", "THEATER CAPACITY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TheaterTable.setCellSelectionEnabled(true);
        TheaterTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        TheaterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TheaterTableMouseClicked(evt);
            }
        });
        TheaterTableScrollPane.setViewportView(TheaterTable);
        TheaterTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        AddTheatherPanel.add(TheaterTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 610, 720));

        TheaterNoteLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterNoteLabel.setForeground(new java.awt.Color(255, 255, 255));
        TheaterNoteLabel.setText("NOTE: Please Carefull While Deleting And Adding Theater ");
        AddTheatherPanel.add(TheaterNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 670, 520, 30));

        TheaterNoteLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        TheaterNoteLabel1.setForeground(new java.awt.Color(255, 255, 255));
        TheaterNoteLabel1.setText("Capacity upto 300 - Only Numbers");
        AddTheatherPanel.add(TheaterNoteLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 700, 520, 30));

        ContentTabbedPane.addTab("ADD THEATHER", AddTheatherPanel);

        ContactsPanel.setBackground(new java.awt.Color(153, 255, 102));
        ContactsPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        ContactsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FeedbackReportLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        FeedbackReportLabel.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackReportLabel.setText("FEEDBACK & REPORT");
        ContactsPanel.add(FeedbackReportLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 190, 30));

        FeedbackTable.setAutoCreateRowSorter(true);
        FeedbackTable.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        FeedbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FEEDBACK ID", "FEEDBACK USER", "FEEDBACK"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        FeedbackTable.setCellSelectionEnabled(true);
        FeedbackTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FeedbackTableMouseClicked(evt);
            }
        });
        FeedbackTableScrollPane.setViewportView(FeedbackTable);

        ContactsPanel.add(FeedbackTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(632, 40, 580, 700));

        FeedbackTextArea.setColumns(20);
        FeedbackTextArea.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        FeedbackTextArea.setRows(5);
        FeedbackTextArea.setBorder(null);
        FeedbackTextareaScrollPane.setViewportView(FeedbackTextArea);

        ContactsPanel.add(FeedbackTextareaScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 560, 590));

        FeedbackDeleteButton.setBackground(new java.awt.Color(51, 51, 255));
        FeedbackDeleteButton.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        FeedbackDeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackDeleteButton.setText("Delete");
        FeedbackDeleteButton.setBorderPainted(false);
        FeedbackDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackDeleteButtonActionPerformed(evt);
            }
        });
        ContactsPanel.add(FeedbackDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 690, 170, 50));

        ContentTabbedPane.addTab("CONTACTS", ContactsPanel);

        MainPanel.add(ContentTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 1240, 800));

        MainBgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OmtbsImages/Sand_1460px.jpg"))); // NOI18N
        MainPanel.add(MainBgImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1460, 830));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1459, 830));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonIconMouseClicked
        System.exit(0);
    }//GEN-LAST:event_CloseButtonIconMouseClicked

    private void MinimizeButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonIconMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinimizeButtonIconMouseClicked

    private void MaximizeButtonIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaximizeButtonIconMouseClicked
        if(this.getExtendedState()!= SuperAdminHome.MAXIMIZED_BOTH){
            this.setExtendedState(SuperAdminHome.MAXIMIZED_BOTH);
        }
        else{
            this.setExtendedState(SuperAdminHome.NORMAL);
        }
    }//GEN-LAST:event_MaximizeButtonIconMouseClicked

    private void LogoutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutLabelMouseClicked
        AdminLogin al = new AdminLogin();
        al.setVisible(true);
        al.pack();
        al.setLocationRelativeTo(null);
        al.setExtendedState(JFrame.EXIT_ON_CLOSE);
        this.dispose();       
    }//GEN-LAST:event_LogoutLabelMouseClicked

    private void DetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailButtonActionPerformed
        ContentTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_DetailButtonActionPerformed

    private void AdminListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminListButtonActionPerformed
        ContentTabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_AdminListButtonActionPerformed

    private void ApprovelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprovelButtonActionPerformed
        ContentTabbedPane.setSelectedIndex(2);
    }//GEN-LAST:event_ApprovelButtonActionPerformed

    private void AddTheaterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTheaterButtonActionPerformed
        ContentTabbedPane.setSelectedIndex(3);
    }//GEN-LAST:event_AddTheaterButtonActionPerformed

    private void FeedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackButtonActionPerformed
        ContentTabbedPane.setSelectedIndex(4);
    }//GEN-LAST:event_FeedbackButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        FieldFetch();
        Adminlistfetch();
        Approve();
        theater_add_table();
        feedbackfetch();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void DetailsUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailsUpdateButtonActionPerformed
        String nsaname =  WelcomeUserLabel.getText();
        //String nsaname = "Asseno Antony OMTBS SA";
        String saname = DetailsNameTextField.getText();
        String saemailid= DetailsEmailIdTextField.getText();
        String sapassword = String.valueOf(DetailsPasswordField.getPassword());
        String saaddress= DetailsAddressTextArea.getText();
        if(saname.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The User Name", "User Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(saemailid.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Email Id", "Email Id", JOptionPane.WARNING_MESSAGE);
        }
        else if(sapassword.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Password", "Password", JOptionPane.WARNING_MESSAGE);
        }
        else if(saaddress.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Address", "Address", JOptionPane.WARNING_MESSAGE);
        }
        else {
            try {
                String FieldUpdateQuery ="UPDATE `admin` SET ADMIN_NAME = ?, ADMIN_EMAIL_ID = ?, ADMIN_PASSWORD = ?, ADMIN_ADDRESS = ? WHERE ADMIN_NAME = ?";
                PreparedStatement ps = MyConnection.getConnection().prepareStatement(FieldUpdateQuery);
                ps.setString(1, saname);
                ps.setString(2, saemailid);
                ps.setString(3, sapassword);
                ps.setString(4, saaddress); 
                ps.setString(5, nsaname);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Super Admin Details Update Successfull", "Successfull Update Message", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "Super Admin Details Update Failed", "Failed Update Message", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_DetailsUpdateButtonActionPerformed

    private void DetailsEditToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailsEditToggleButtonActionPerformed
       if (DetailsEditToggleButton.isSelected()) {
            DetailsNameTextField.setEditable(true);
            DetailsEmailIdTextField.setEditable(true);
            DetailsPasswordField.setEditable(true);
            DetailsAddressTextArea.setEditable(true);  
        }
        else  {
            DetailsNameTextField.setEditable(false);
            DetailsEmailIdTextField.setEditable(false);
            DetailsPasswordField.setEditable(false);
            DetailsAddressTextArea.setEditable(false);  
        }
       
    }//GEN-LAST:event_DetailsEditToggleButtonActionPerformed

    private void DetailsEditToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DetailsEditToggleButtonItemStateChanged
        if (DetailsEditToggleButton.isSelected()) {
            DetailsEditToggleButton.setText("EDITABLE");  
        }
        else  {
            DetailsEditToggleButton.setText("NOT EDITABLE");  
        }
    }//GEN-LAST:event_DetailsEditToggleButtonItemStateChanged

    private void AdminSlotApprovelTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdminSlotApprovelTableMouseClicked
        DefaultTableModel Df = (DefaultTableModel)AdminSlotApprovelTable.getModel();
        int selectedIndex = AdminSlotApprovelTable.getSelectedRow();
        ApprovelSetTextField.setText(Df.getValueAt(selectedIndex, 4).toString());
    }//GEN-LAST:event_AdminSlotApprovelTableMouseClicked

    private void ApprovelUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprovelUpdateButtonActionPerformed
        String saapprovel = ApprovelSetTextField.getText();
        DefaultTableModel Df = (DefaultTableModel)AdminSlotApprovelTable.getModel();
        int selectedIndex = AdminSlotApprovelTable.getSelectedRow();
        try {
            int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            String FieldUpdateQuery ="UPDATE `admin` SET APPROVAL = ? WHERE ADMIN_ID = ?";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(FieldUpdateQuery);
            ps.setString(1, saapprovel);
            ps.setInt(2, id);
            ps.executeUpdate();
            Approve();
            JOptionPane.showMessageDialog(null, "Approved; Update Successfull", "Approved Update Message", JOptionPane.INFORMATION_MESSAGE);
            ApprovelSetTextField.setText("");
            } 
        catch (SQLException ex) {
                Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,"Approvel Updating Error Occuring!" , "Approving Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_ApprovelUpdateButtonActionPerformed

    private void ApprovelToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprovelToggleButtonActionPerformed
        if (ApprovelToggleButton.isSelected()) {
            ApprovelSetTextField.setEditable(true); 
        }
        else  {
            ApprovelSetTextField.setEditable(false);
        }
    }//GEN-LAST:event_ApprovelToggleButtonActionPerformed

    private void ApprovelToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ApprovelToggleButtonItemStateChanged
        if (ApprovelToggleButton.isSelected()) {
            ApprovelToggleButton.setText("EDITABLE");  
        }
        else  {
            ApprovelToggleButton.setText("NOT EDITABLE");  
        }
    }//GEN-LAST:event_ApprovelToggleButtonItemStateChanged

    private void TheaterAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TheaterAddButtonActionPerformed
        String theatername =  TheaterNameTextField.getText();
        String theaterlocation = TheaterLocationTextField.getText();
        String theateraddress= TheaterAddressTextArea.getText();
        String theatercapacity= TheaterCapacityTextField.getText();
        if(theatername.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Theater Name", "Theater Name", JOptionPane.WARNING_MESSAGE);
        }
        else if(theaterlocation.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Theater Location", "Theater Location", JOptionPane.WARNING_MESSAGE);
        }
        else if(theateraddress.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Theater Address", "Theater Address", JOptionPane.WARNING_MESSAGE);
        }
        else if(theatercapacity.equals("")) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please Enter The Theater Capacity", "Theater Capacity", JOptionPane.WARNING_MESSAGE);
        }
        else {
            try {
                String TheaterAddQuery ="INSERT INTO `theater` (`THEATER_NAME`, `THEATER_LOCATION`, `THEATER_CAPACITY`, `THEATER_ADDRESS`) VALUES (?,?,?,?)";
                PreparedStatement ps = MyConnection.getConnection().prepareStatement(TheaterAddQuery);
                ps.setString(1, theatername);
                ps.setString(2, theaterlocation);
                ps.setString(3, theatercapacity);
                ps.setString(4, theateraddress); 
                if(ps.executeUpdate() > 0){
                    theater_add_table();
                    JOptionPane.showMessageDialog(null,"Theater Has Been Successfully Added To Database" , "Theater Add Successfully", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                        JOptionPane.showMessageDialog(null,"Theather Details Insertion Failed!" , "Theather Detail", JOptionPane.INFORMATION_MESSAGE);
                    }
            } 
            catch (SQLException ex) {
                Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,"Database Connection Failed!" , "Database Connection", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_TheaterAddButtonActionPerformed

    private void TheaterDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TheaterDeleteButtonActionPerformed
        DefaultTableModel Df = (DefaultTableModel)TheaterTable.getModel();
        int selectedIndex = TheaterTable.getSelectedRow();
        int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            int dialogResult = JOptionPane.showConfirmDialog(null,"Do You Want To Delete This Record!" , "Delete Warning!" , JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                try {
                    PreparedStatement ps;
                    String TableTheaterDeleteQuery = "DELETE FROM `theater` WHERE THEATER_ID=?";
                    ps = MyConnection.getConnection().prepareStatement(TableTheaterDeleteQuery);
                    ps.setInt(1, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null,"Theater Slot Successfully Deleted" , "Theather Slot Deletion", JOptionPane.INFORMATION_MESSAGE);
                    theater_add_table();  
                } 
                catch (SQLException ex) {
                    Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Theather Slot Delete Failed!" , "Theather Deletion", JOptionPane.ERROR_MESSAGE);
                }
            }     
    }//GEN-LAST:event_TheaterDeleteButtonActionPerformed

    private void TheaterUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TheaterUpdateButtonActionPerformed
        String theatername = TheaterNameTextField.getText();
        String theaterlocation = TheaterLocationTextField.getText();
        String theateraddress = TheaterAddressTextArea.getText();
        String theatercapacity = TheaterCapacityTextField.getText();
        DefaultTableModel Df = (DefaultTableModel)TheaterTable.getModel();
        int selectedIndex = TheaterTable.getSelectedRow();
        try {
                int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
                String TheaterAddupdateQuery ="UPDATE `theater` SET THEATER_NAME=?, THEATER_LOCATION=?, THEATER_CAPACITY=?, THEATER_ADDRESS=? WHERE THEATER_ID=?";
                PreparedStatement ps = MyConnection.getConnection().prepareStatement(TheaterAddupdateQuery);
                ps.setString(1, theatername);
                ps.setString(2, theaterlocation);
                ps.setString(3, theatercapacity);
                ps.setString(4, theateraddress); 
                ps.setInt(5, id);
                ps.executeUpdate();
                theater_add_table();
                JOptionPane.showMessageDialog(null,"Theater Details Has Been Successfully Updated" , "Theater Detail Update", JOptionPane.INFORMATION_MESSAGE); 
                TheaterNameTextField.setText("");
                TheaterLocationTextField.setText("");
                TheaterAddressTextArea.setText("");
                TheaterCapacityTextField.setText("");
                TheaterNameTextField.requestFocus();
            } catch (SQLException ex) {
                Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,"Database Connection Failed!" , "Database Connection", JOptionPane.ERROR_MESSAGE);
            }     
    }//GEN-LAST:event_TheaterUpdateButtonActionPerformed

    private void TheaterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TheaterTableMouseClicked
        DefaultTableModel Df = (DefaultTableModel)TheaterTable.getModel();
        int selectedIndex = TheaterTable.getSelectedRow();
        TheaterNameTextField.setText(Df.getValueAt(selectedIndex, 1).toString());
        TheaterLocationTextField.setText(Df.getValueAt(selectedIndex, 2).toString());
        TheaterAddressTextArea.setText(Df.getValueAt(selectedIndex, 3).toString());
        TheaterCapacityTextField.setText(Df.getValueAt(selectedIndex, 4).toString());
    }//GEN-LAST:event_TheaterTableMouseClicked

    private void FeedbackTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeedbackTableMouseClicked
        DefaultTableModel Df = (DefaultTableModel)FeedbackTable.getModel();
        int selectedIndex = FeedbackTable.getSelectedRow();
        FeedbackTextArea.setText(Df.getValueAt(selectedIndex, 2).toString());
    }//GEN-LAST:event_FeedbackTableMouseClicked

    private void FeedbackDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackDeleteButtonActionPerformed
        DefaultTableModel Df = (DefaultTableModel)FeedbackTable.getModel();
        int selectedIndex = FeedbackTable.getSelectedRow();
        int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            int dialogResult = JOptionPane.showConfirmDialog(null,"Do You Want To Delete The Feedback Record!" , "Feedback Deletion Warning!" , JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                try {
                    PreparedStatement ps;
                    String TableFeedbackDeleteQuery = "DELETE FROM `feedback` WHERE FEEDBACK_ID=?";
                    ps = MyConnection.getConnection().prepareStatement(TableFeedbackDeleteQuery);
                    ps.setInt(1, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null,"Feedback Slot Deleted Successfully" , "Feedback Deletion", JOptionPane.INFORMATION_MESSAGE);
                    feedbackfetch();
                    FeedbackTextArea.setText("");
                } 
                catch (SQLException ex) {
                    Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Feedback Slot Deletion Error" , "Deletion Error", JOptionPane.ERROR_MESSAGE);
                }
            }     
    }//GEN-LAST:event_FeedbackDeleteButtonActionPerformed

    private void SAHShowPassIconMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SAHShowPassIconMousePressed
        SAHHidePassIcon.setVisible(true);
        SAHShowPassIcon.setVisible(false);
        DetailsPasswordField.setEchoChar((char)0);
    }//GEN-LAST:event_SAHShowPassIconMousePressed

    private void SAHHidePassIconMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SAHHidePassIconMousePressed
        SAHShowPassIcon.setVisible(true);
        SAHHidePassIcon.setVisible(false);
        DetailsPasswordField.setEchoChar('*');    
    }//GEN-LAST:event_SAHHidePassIconMousePressed

    private void CheckForUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckForUpdateButtonActionPerformed
        try {
            Desktop d = Desktop.getDesktop();
            d.browse(new URI("http://localhost/OMTBS_RS/home.html"));
            // file:///C:/xampp/htdocs/RABS_OEP/home.html
        }
        catch (IOException | URISyntaxException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"URL Redirection Failed" , "Redirection Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CheckForUpdateButtonActionPerformed

    private void FieldFetch(){
        try {
            String nsaname =  WelcomeUserLabel.getText();
            //String nsaname = "Asseno Antony OMTBS SA";
            String fieldfetchquery ="SELECT `ADMIN_NAME`, `ADMIN_EMAIL_ID`, `ADMIN_PASSWORD`, `ADMIN_ADDRESS`, `ROLE`, `ADMIN_ACCOUNT_TIMESTAMP` FROM `admin` WHERE `ADMIN_NAME` = ? ";
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(fieldfetchquery);
            ps.setString(1, nsaname);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                DetailsNameTextField.setText(rs.getString(1));
                DetailsEmailIdTextField.setText(rs.getString(2));   
                DetailsPasswordField.setText(rs.getString(3));   
                DetailsAddressTextArea.setText(rs.getString(4));   
                DetailsRoleTextField.setText(rs.getString(5));   
                DetailsTimeStampTextField.setText(rs.getString(6));   
            }
        } 
        catch (SQLException ex) {
            Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Super Admin Details Fetching Error Occuring!" , "Super Admin Details", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void Adminlistfetch(){
        int r;
        try {
            PreparedStatement ps;
            String sanrole = "Admin";
            String TableAdminlistQuery = "SELECT * FROM `admin` WHERE ROLE = ?";
            ps = MyConnection.getConnection().prepareStatement(TableAdminlistQuery);
            ps.setString(1, sanrole);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            r = rsmd.getColumnCount();
            DefaultTableModel Dft = (DefaultTableModel)AdminListTable.getModel();
            Dft.setRowCount(0);
            while(rs.next()){
                Vector vr2 = new Vector();
                for(int a=1; a<=r; a++){
                    vr2.add(rs.getString("ADMIN_ID"));
                    vr2.add(rs.getString("ADMIN_NAME"));
                    vr2.add(rs.getString("ADMIN_EMAIL_ID"));
                    vr2.add(rs.getString("ADMIN_ADDRESS"));
                    vr2.add(rs.getString("ROLE"));
                    vr2.add(rs.getString("APPROVAL"));
                    vr2.add(rs.getString("ADMIN_ACCOUNT_TIMESTAMP"));
                }
                Dft.addRow(vr2);
            }                        
        } catch (SQLException ex) {
            Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Admin Details Fetching Error Occuring!" , "Admin Details", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void Approve(){
        int s;
        try {
            PreparedStatement ps;
            String sannrole = "Admin";
            String TableApproveQuery = "SELECT * FROM `admin` WHERE ROLE = ?";
            ps = MyConnection.getConnection().prepareStatement(TableApproveQuery);
            ps.setString(1, sannrole);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            s = rsmd.getColumnCount();
            DefaultTableModel Dft = (DefaultTableModel)AdminSlotApprovelTable.getModel();
            Dft.setRowCount(0);
            while(rs.next()){
                Vector vr2 = new Vector();
                for(int a=1; a<=s; a++){
                    vr2.add(rs.getString("ADMIN_ID"));
                    vr2.add(rs.getString("ADMIN_NAME"));
                    vr2.add(rs.getString("ADMIN_EMAIL_ID"));
                    vr2.add(rs.getString("ROLE"));
                    vr2.add(rs.getString("APPROVAL"));
                }
                Dft.addRow(vr2);
            }                        
        } catch (SQLException ex) {
            Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Super Admin Approve, Error Occuring!" , "Admin Approve", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void theater_add_table(){
        int y;
        try {
            PreparedStatement ps;
            String TabletheateraddQuery = "SELECT * FROM theater";
            ps = MyConnection.getConnection().prepareStatement(TabletheateraddQuery);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            y = rsmd.getColumnCount();
            DefaultTableModel Dft = (DefaultTableModel)TheaterTable.getModel();
            Dft.setRowCount(0);
            while(rs.next()){
                Vector vr2 = new Vector();
                for(int a=1; a<=y; a++){
                    vr2.add(rs.getString("THEATER_ID"));
                    vr2.add(rs.getString("THEATER_NAME"));
                    vr2.add(rs.getString("THEATER_LOCATION"));
                    vr2.add(rs.getString("THEATER_ADDRESS"));
                    vr2.add(rs.getString("THEATER_CAPACITY"));
                }
                Dft.addRow(vr2);
            }                        
        } catch (SQLException ex) {
            Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Theater Slot Adding Error Occuring!" , "Theater Adding", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void transprent_color(){
        ContentTabbedPane.setBackground(new Color(0, 0, 0, 0));
        //DetailPanel.setBackground(new Color(0, 0, 0, 0));
        AdminListPanel.setBackground(new Color(0, 0, 0, 0));
        ApprovelPanel.setBackground(new Color(0, 0, 0, 0));
        AddTheatherPanel.setBackground(new Color(0, 0, 0, 0));
        ContactsPanel.setBackground(new Color(0, 0, 0, 0));
    }
    
    private void feedbackfetch(){
        int h;
        try {
            PreparedStatement ps;
            String TableApproveQuery = "SELECT * FROM feedback";
            ps = MyConnection.getConnection().prepareStatement(TableApproveQuery);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            h = rsmd.getColumnCount();
            DefaultTableModel Dft = (DefaultTableModel)FeedbackTable.getModel();
            Dft.setRowCount(0);
            while(rs.next()){
                Vector vr2 = new Vector();
                for(int a=1; a<=h; a++){
                    vr2.add(rs.getString("FEEDBACK_ID"));
                    vr2.add(rs.getString("FEEDBACK_USER"));
                    vr2.add(rs.getString("FEEDBACK"));
                }
                Dft.addRow(vr2);
            }                        
        } catch (SQLException ex) {
            Logger.getLogger(SuperAdminHome.class.getName()).log(Level.SEVERE, null, ex);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,"Feedback Fetching Error Occuring!" , "Feedback Fetching", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuperAdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SuperAdminHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTheaterButton;
    private javax.swing.JPanel AddTheatherPanel;
    private javax.swing.JButton AdminListButton;
    private javax.swing.JLabel AdminListLabel;
    private javax.swing.JPanel AdminListPanel;
    private javax.swing.JScrollPane AdminListScrollPane;
    private javax.swing.JTable AdminListTable;
    private javax.swing.JLabel AdminSlotApprovelLabel;
    private javax.swing.JScrollPane AdminSlotApprovelScrollPane;
    private javax.swing.JTable AdminSlotApprovelTable;
    private javax.swing.JButton ApprovelButton;
    private javax.swing.JLabel ApprovelNoteLabel;
    private javax.swing.JLabel ApprovelNoteLabel1;
    private javax.swing.JLabel ApprovelNoteLabel2;
    private javax.swing.JLabel ApprovelNoteLabel3;
    private javax.swing.JPanel ApprovelPanel;
    private javax.swing.JLabel ApprovelSetLabel;
    private javax.swing.JTextField ApprovelSetTextField;
    private javax.swing.JToggleButton ApprovelToggleButton;
    private javax.swing.JButton ApprovelUpdateButton;
    private javax.swing.JButton CheckForUpdateButton;
    private javax.swing.JButton CloseButtonIcon;
    private javax.swing.JPanel ContactsPanel;
    private javax.swing.JTabbedPane ContentTabbedPane;
    private javax.swing.JButton DetailButton;
    private javax.swing.JPanel DetailPanel;
    private javax.swing.JLabel DetailsAddressLabel;
    private javax.swing.JScrollPane DetailsAddressScrollPane;
    private javax.swing.JTextArea DetailsAddressTextArea;
    private javax.swing.JLabel DetailsBgImg;
    private com.toedter.calendar.JCalendar DetailsCalendar;
    private javax.swing.JToggleButton DetailsEditToggleButton;
    private javax.swing.JLabel DetailsEmailIdLabel;
    private javax.swing.JTextField DetailsEmailIdTextField;
    private javax.swing.JLabel DetailsNameLabel;
    private javax.swing.JTextField DetailsNameTextField;
    private javax.swing.JLabel DetailsNoteLabel;
    private javax.swing.JLabel DetailsNoteLabel1;
    private javax.swing.JPasswordField DetailsPasswordField;
    private javax.swing.JLabel DetailsPasswordLabel;
    private javax.swing.JLabel DetailsRoleLabel;
    private javax.swing.JTextField DetailsRoleTextField;
    private javax.swing.JLabel DetailsTimeStampLabel;
    private javax.swing.JTextField DetailsTimeStampTextField;
    private javax.swing.JButton DetailsUpdateButton;
    private javax.swing.JButton FeedbackButton;
    private javax.swing.JButton FeedbackDeleteButton;
    private javax.swing.JLabel FeedbackReportLabel;
    private javax.swing.JTable FeedbackTable;
    private javax.swing.JScrollPane FeedbackTableScrollPane;
    private javax.swing.JTextArea FeedbackTextArea;
    private javax.swing.JScrollPane FeedbackTextareaScrollPane;
    private javax.swing.JLabel LogoutLabel;
    private javax.swing.JLabel MainBgImg;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton MaximizeButtonIcon;
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JButton MinimizeButtonIcon;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel SAHHidePassIcon;
    private javax.swing.JLabel SAHShowPassIcon;
    private javax.swing.JLabel SideBgImg;
    private javax.swing.JPanel SidePanel;
    private javax.swing.JButton TheaterAddButton;
    private javax.swing.JLabel TheaterAddressLabel;
    private javax.swing.JScrollPane TheaterAddressScrollPane;
    private javax.swing.JTextArea TheaterAddressTextArea;
    private javax.swing.JLabel TheaterCapacityLabel;
    private javax.swing.JTextField TheaterCapacityTextField;
    private javax.swing.JButton TheaterDeleteButton;
    private javax.swing.JLabel TheaterLocationLabel;
    private javax.swing.JTextField TheaterLocationTextField;
    private javax.swing.JLabel TheaterNameLabel;
    private javax.swing.JTextField TheaterNameTextField;
    private javax.swing.JLabel TheaterNoteLabel;
    private javax.swing.JLabel TheaterNoteLabel1;
    private javax.swing.JTable TheaterTable;
    private javax.swing.JScrollPane TheaterTableScrollPane;
    private javax.swing.JButton TheaterUpdateButton;
    private javax.swing.JLabel TopBgImg;
    private javax.swing.JPanel TopPanel;
    public javax.swing.JLabel WelcomeUserLabel;
    // End of variables declaration//GEN-END:variables
}
